// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/JuranwuyouUseruserTechnician.proto

package JuranwuyouUser

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UserTechnicianRequest struct {
	Id                   int64    `protobuf:"zigzag64,1,opt,name=id,proto3" json:"id,omitempty"`
	Code                 string   `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	MerchantId           int64    `protobuf:"zigzag64,3,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	UserId               int64    `protobuf:"zigzag64,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	WorkerId             int64    `protobuf:"zigzag64,5,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	ServiceStatus        int32    `protobuf:"varint,6,opt,name=service_status,json=serviceStatus,proto3" json:"service_status,omitempty"`
	Mobile               string   `protobuf:"bytes,7,opt,name=mobile,proto3" json:"mobile,omitempty"`
	ProvinceId           int64    `protobuf:"zigzag64,8,opt,name=province_id,json=provinceId,proto3" json:"province_id,omitempty"`
	CityId               int64    `protobuf:"zigzag64,9,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
	AreaId               int64    `protobuf:"zigzag64,10,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`
	ServiceProductIds    string   `protobuf:"bytes,11,opt,name=service_product_ids,json=serviceProductIds,proto3" json:"service_product_ids,omitempty"`
	ContactName          string   `protobuf:"bytes,12,opt,name=contact_name,json=contactName,proto3" json:"contact_name,omitempty"`
	ContactMobile        string   `protobuf:"bytes,13,opt,name=contact_mobile,json=contactMobile,proto3" json:"contact_mobile,omitempty"`
	ReferrerName         string   `protobuf:"bytes,14,opt,name=referrer_name,json=referrerName,proto3" json:"referrer_name,omitempty"`
	ReferrerMobile       string   `protobuf:"bytes,15,opt,name=referrer_mobile,json=referrerMobile,proto3" json:"referrer_mobile,omitempty"`
	Remark               string   `protobuf:"bytes,16,opt,name=remark,proto3" json:"remark,omitempty"`
	IsEnabled            int32    `protobuf:"varint,17,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	IsDelete             int32    `protobuf:"varint,18,opt,name=is_delete,json=isDelete,proto3" json:"is_delete,omitempty"`
	Status               int32    `protobuf:"varint,19,opt,name=status,proto3" json:"status,omitempty"`
	RegistrationForm     string   `protobuf:"bytes,20,opt,name=registration_form,json=registrationForm,proto3" json:"registration_form,omitempty"`
	HealthCert           string   `protobuf:"bytes,21,opt,name=health_cert,json=healthCert,proto3" json:"health_cert,omitempty"`
	HealthCertExpiryDate string   `protobuf:"bytes,22,opt,name=health_cert_expiry_date,json=healthCertExpiryDate,proto3" json:"health_cert_expiry_date,omitempty"`
	ExaminationReport    string   `protobuf:"bytes,23,opt,name=examination_report,json=examinationReport,proto3" json:"examination_report,omitempty"`
	JobSeniorityCard     string   `protobuf:"bytes,24,opt,name=job_seniority_card,json=jobSeniorityCard,proto3" json:"job_seniority_card,omitempty"`
	PositionalTitles     string   `protobuf:"bytes,25,opt,name=positional_titles,json=positionalTitles,proto3" json:"positional_titles,omitempty"`
	CreateTime           string   `protobuf:"bytes,26,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	CreateUserId         int64    `protobuf:"zigzag64,27,opt,name=create_user_id,json=createUserId,proto3" json:"create_user_id,omitempty"`
	UpdateTime           string   `protobuf:"bytes,28,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	UpdateUserId         int64    `protobuf:"zigzag64,29,opt,name=update_user_id,json=updateUserId,proto3" json:"update_user_id,omitempty"`
	Version              int32    `protobuf:"varint,30,opt,name=version,proto3" json:"version,omitempty"`
	Address              string   `protobuf:"bytes,31,opt,name=address,proto3" json:"address,omitempty"`
	ExamineStatus        int32    `protobuf:"varint,32,opt,name=examine_status,json=examineStatus,proto3" json:"examine_status,omitempty"`
	IntentionalSkillIds  string   `protobuf:"bytes,33,opt,name=intentional_skill_ids,json=intentionalSkillIds,proto3" json:"intentional_skill_ids,omitempty"`
	Age                  int32    `protobuf:"varint,34,opt,name=age,proto3" json:"age,omitempty"`
	WorkAge              int32    `protobuf:"varint,35,opt,name=work_age,json=workAge,proto3" json:"work_age,omitempty"`
	ActivationStatus     int32    `protobuf:"varint,36,opt,name=activation_status,json=activationStatus,proto3" json:"activation_status,omitempty"`
	BankName             string   `protobuf:"bytes,37,opt,name=bank_name,json=bankName,proto3" json:"bank_name,omitempty"`
	BankNo               string   `protobuf:"bytes,38,opt,name=bank_no,json=bankNo,proto3" json:"bank_no,omitempty"`
	OtherCertificates    string   `protobuf:"bytes,39,opt,name=other_certificates,json=otherCertificates,proto3" json:"other_certificates,omitempty"`
	SettlementType       int32    `protobuf:"varint,40,opt,name=settlement_type,json=settlementType,proto3" json:"settlement_type,omitempty"`
	SettlementPrompt     string   `protobuf:"bytes,41,opt,name=settlement_prompt,json=settlementPrompt,proto3" json:"settlement_prompt,omitempty"`
	SubordinateType      int32    `protobuf:"varint,42,opt,name=subordinate_type,json=subordinateType,proto3" json:"subordinate_type,omitempty"`
	AcceptCount          int64    `protobuf:"zigzag64,43,opt,name=accept_count,json=acceptCount,proto3" json:"accept_count,omitempty"`
	IdCard               string   `protobuf:"bytes,44,opt,name=id_card,json=idCard,proto3" json:"id_card,omitempty"`
	IdCardValidityPeriod string   `protobuf:"bytes,45,opt,name=id_card_validity_period,json=idCardValidityPeriod,proto3" json:"id_card_validity_period,omitempty"`
	IdCardImg            string   `protobuf:"bytes,46,opt,name=id_card_img,json=idCardImg,proto3" json:"id_card_img,omitempty"`
	AccountStatus        int32    `protobuf:"varint,47,opt,name=account_status,json=accountStatus,proto3" json:"account_status,omitempty"`
	CentreAddress        string   `protobuf:"bytes,48,opt,name=centre_address,json=centreAddress,proto3" json:"centre_address,omitempty"`
	CentreLng            string   `protobuf:"bytes,49,opt,name=centre_lng,json=centreLng,proto3" json:"centre_lng,omitempty"`
	CentreLat            string   `protobuf:"bytes,50,opt,name=centre_lat,json=centreLat,proto3" json:"centre_lat,omitempty"`
	OverstepAreaType     int32    `protobuf:"varint,51,opt,name=overstep_area_type,json=overstepAreaType,proto3" json:"overstep_area_type,omitempty"`
	PriceStarting        float64  `protobuf:"fixed64,52,opt,name=price_starting,json=priceStarting,proto3" json:"price_starting,omitempty"`
	PriceUnit            float64  `protobuf:"fixed64,53,opt,name=price_unit,json=priceUnit,proto3" json:"price_unit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserTechnicianRequest) Reset()         { *m = UserTechnicianRequest{} }
func (m *UserTechnicianRequest) String() string { return proto.CompactTextString(m) }
func (*UserTechnicianRequest) ProtoMessage()    {}
func (*UserTechnicianRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_da6da0d7dd6d868e, []int{0}
}
func (m *UserTechnicianRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserTechnicianRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserTechnicianRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserTechnicianRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserTechnicianRequest.Merge(m, src)
}
func (m *UserTechnicianRequest) XXX_Size() int {
	return m.Size()
}
func (m *UserTechnicianRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserTechnicianRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserTechnicianRequest proto.InternalMessageInfo

func (m *UserTechnicianRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserTechnicianRequest) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *UserTechnicianRequest) GetMerchantId() int64 {
	if m != nil {
		return m.MerchantId
	}
	return 0
}

func (m *UserTechnicianRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserTechnicianRequest) GetWorkerId() int64 {
	if m != nil {
		return m.WorkerId
	}
	return 0
}

func (m *UserTechnicianRequest) GetServiceStatus() int32 {
	if m != nil {
		return m.ServiceStatus
	}
	return 0
}

func (m *UserTechnicianRequest) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

func (m *UserTechnicianRequest) GetProvinceId() int64 {
	if m != nil {
		return m.ProvinceId
	}
	return 0
}

func (m *UserTechnicianRequest) GetCityId() int64 {
	if m != nil {
		return m.CityId
	}
	return 0
}

func (m *UserTechnicianRequest) GetAreaId() int64 {
	if m != nil {
		return m.AreaId
	}
	return 0
}

func (m *UserTechnicianRequest) GetServiceProductIds() string {
	if m != nil {
		return m.ServiceProductIds
	}
	return ""
}

func (m *UserTechnicianRequest) GetContactName() string {
	if m != nil {
		return m.ContactName
	}
	return ""
}

func (m *UserTechnicianRequest) GetContactMobile() string {
	if m != nil {
		return m.ContactMobile
	}
	return ""
}

func (m *UserTechnicianRequest) GetReferrerName() string {
	if m != nil {
		return m.ReferrerName
	}
	return ""
}

func (m *UserTechnicianRequest) GetReferrerMobile() string {
	if m != nil {
		return m.ReferrerMobile
	}
	return ""
}

func (m *UserTechnicianRequest) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *UserTechnicianRequest) GetIsEnabled() int32 {
	if m != nil {
		return m.IsEnabled
	}
	return 0
}

func (m *UserTechnicianRequest) GetIsDelete() int32 {
	if m != nil {
		return m.IsDelete
	}
	return 0
}

func (m *UserTechnicianRequest) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *UserTechnicianRequest) GetRegistrationForm() string {
	if m != nil {
		return m.RegistrationForm
	}
	return ""
}

func (m *UserTechnicianRequest) GetHealthCert() string {
	if m != nil {
		return m.HealthCert
	}
	return ""
}

func (m *UserTechnicianRequest) GetHealthCertExpiryDate() string {
	if m != nil {
		return m.HealthCertExpiryDate
	}
	return ""
}

func (m *UserTechnicianRequest) GetExaminationReport() string {
	if m != nil {
		return m.ExaminationReport
	}
	return ""
}

func (m *UserTechnicianRequest) GetJobSeniorityCard() string {
	if m != nil {
		return m.JobSeniorityCard
	}
	return ""
}

func (m *UserTechnicianRequest) GetPositionalTitles() string {
	if m != nil {
		return m.PositionalTitles
	}
	return ""
}

func (m *UserTechnicianRequest) GetCreateTime() string {
	if m != nil {
		return m.CreateTime
	}
	return ""
}

func (m *UserTechnicianRequest) GetCreateUserId() int64 {
	if m != nil {
		return m.CreateUserId
	}
	return 0
}

func (m *UserTechnicianRequest) GetUpdateTime() string {
	if m != nil {
		return m.UpdateTime
	}
	return ""
}

func (m *UserTechnicianRequest) GetUpdateUserId() int64 {
	if m != nil {
		return m.UpdateUserId
	}
	return 0
}

func (m *UserTechnicianRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *UserTechnicianRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *UserTechnicianRequest) GetExamineStatus() int32 {
	if m != nil {
		return m.ExamineStatus
	}
	return 0
}

func (m *UserTechnicianRequest) GetIntentionalSkillIds() string {
	if m != nil {
		return m.IntentionalSkillIds
	}
	return ""
}

func (m *UserTechnicianRequest) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *UserTechnicianRequest) GetWorkAge() int32 {
	if m != nil {
		return m.WorkAge
	}
	return 0
}

func (m *UserTechnicianRequest) GetActivationStatus() int32 {
	if m != nil {
		return m.ActivationStatus
	}
	return 0
}

func (m *UserTechnicianRequest) GetBankName() string {
	if m != nil {
		return m.BankName
	}
	return ""
}

func (m *UserTechnicianRequest) GetBankNo() string {
	if m != nil {
		return m.BankNo
	}
	return ""
}

func (m *UserTechnicianRequest) GetOtherCertificates() string {
	if m != nil {
		return m.OtherCertificates
	}
	return ""
}

func (m *UserTechnicianRequest) GetSettlementType() int32 {
	if m != nil {
		return m.SettlementType
	}
	return 0
}

func (m *UserTechnicianRequest) GetSettlementPrompt() string {
	if m != nil {
		return m.SettlementPrompt
	}
	return ""
}

func (m *UserTechnicianRequest) GetSubordinateType() int32 {
	if m != nil {
		return m.SubordinateType
	}
	return 0
}

func (m *UserTechnicianRequest) GetAcceptCount() int64 {
	if m != nil {
		return m.AcceptCount
	}
	return 0
}

func (m *UserTechnicianRequest) GetIdCard() string {
	if m != nil {
		return m.IdCard
	}
	return ""
}

func (m *UserTechnicianRequest) GetIdCardValidityPeriod() string {
	if m != nil {
		return m.IdCardValidityPeriod
	}
	return ""
}

func (m *UserTechnicianRequest) GetIdCardImg() string {
	if m != nil {
		return m.IdCardImg
	}
	return ""
}

func (m *UserTechnicianRequest) GetAccountStatus() int32 {
	if m != nil {
		return m.AccountStatus
	}
	return 0
}

func (m *UserTechnicianRequest) GetCentreAddress() string {
	if m != nil {
		return m.CentreAddress
	}
	return ""
}

func (m *UserTechnicianRequest) GetCentreLng() string {
	if m != nil {
		return m.CentreLng
	}
	return ""
}

func (m *UserTechnicianRequest) GetCentreLat() string {
	if m != nil {
		return m.CentreLat
	}
	return ""
}

func (m *UserTechnicianRequest) GetOverstepAreaType() int32 {
	if m != nil {
		return m.OverstepAreaType
	}
	return 0
}

func (m *UserTechnicianRequest) GetPriceStarting() float64 {
	if m != nil {
		return m.PriceStarting
	}
	return 0
}

func (m *UserTechnicianRequest) GetPriceUnit() float64 {
	if m != nil {
		return m.PriceUnit
	}
	return 0
}

type UserTechnicianFilter struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserTechnicianFilter) Reset()         { *m = UserTechnicianFilter{} }
func (m *UserTechnicianFilter) String() string { return proto.CompactTextString(m) }
func (*UserTechnicianFilter) ProtoMessage()    {}
func (*UserTechnicianFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_da6da0d7dd6d868e, []int{1}
}
func (m *UserTechnicianFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserTechnicianFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserTechnicianFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserTechnicianFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserTechnicianFilter.Merge(m, src)
}
func (m *UserTechnicianFilter) XXX_Size() int {
	return m.Size()
}
func (m *UserTechnicianFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_UserTechnicianFilter.DiscardUnknown(m)
}

var xxx_messageInfo_UserTechnicianFilter proto.InternalMessageInfo

func (m *UserTechnicianFilter) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type UserTechnicianResponse struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Success              bool     `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserTechnicianResponse) Reset()         { *m = UserTechnicianResponse{} }
func (m *UserTechnicianResponse) String() string { return proto.CompactTextString(m) }
func (*UserTechnicianResponse) ProtoMessage()    {}
func (*UserTechnicianResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_da6da0d7dd6d868e, []int{2}
}
func (m *UserTechnicianResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserTechnicianResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserTechnicianResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserTechnicianResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserTechnicianResponse.Merge(m, src)
}
func (m *UserTechnicianResponse) XXX_Size() int {
	return m.Size()
}
func (m *UserTechnicianResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserTechnicianResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserTechnicianResponse proto.InternalMessageInfo

func (m *UserTechnicianResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserTechnicianResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*UserTechnicianRequest)(nil), "JuranwuyouUser.UserTechnicianRequest")
	proto.RegisterType((*UserTechnicianFilter)(nil), "JuranwuyouUser.UserTechnicianFilter")
	proto.RegisterType((*UserTechnicianResponse)(nil), "JuranwuyouUser.UserTechnicianResponse")
}

func init() {
	proto.RegisterFile("proto/JuranwuyouUseruserTechnician.proto", fileDescriptor_da6da0d7dd6d868e)
}

var fileDescriptor_da6da0d7dd6d868e = []byte{
	// 1107 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xdf, 0x52, 0x1b, 0xb7,
	0x17, 0x8e, 0x49, 0x02, 0x58, 0x06, 0xc7, 0x28, 0x04, 0x94, 0xe4, 0x17, 0xf3, 0x27, 0x40, 0x9c,
	0x5f, 0x12, 0xd2, 0x92, 0xf2, 0x00, 0x84, 0x24, 0x1d, 0x77, 0xda, 0x0e, 0x63, 0xa0, 0xb7, 0x3b,
	0xf2, 0xee, 0xc1, 0x28, 0xec, 0x4a, 0x5b, 0x49, 0x4b, 0xc2, 0x9b, 0xf4, 0x89, 0x3a, 0xbd, 0xec,
	0x5d, 0x6f, 0x3b, 0xf4, 0x45, 0x3a, 0x3a, 0x47, 0x0b, 0x36, 0xd3, 0x69, 0x7b, 0xd3, 0x3b, 0x9f,
	0xef, 0xfb, 0xfc, 0xe9, 0x48, 0xe7, 0x1c, 0x69, 0x59, 0xaf, 0xb4, 0xc6, 0x9b, 0xd7, 0xdf, 0x54,
	0x56, 0xea, 0x4f, 0xd5, 0x85, 0xa9, 0x8e, 0x1d, 0xd8, 0xca, 0x81, 0x3d, 0x82, 0xf4, 0x54, 0xab,
	0x54, 0x49, 0xbd, 0x8d, 0x12, 0xde, 0x9e, 0xd4, 0xac, 0xff, 0xd6, 0x66, 0x0f, 0x8e, 0x27, 0x84,
	0x03, 0xf8, 0xb1, 0x02, 0xe7, 0x79, 0x9b, 0x4d, 0xa9, 0x4c, 0x34, 0x56, 0x1b, 0x3d, 0x3e, 0x98,
	0x52, 0x19, 0xe7, 0xec, 0x4e, 0x6a, 0x32, 0x10, 0x53, 0xab, 0x8d, 0x5e, 0x73, 0x80, 0xbf, 0xf9,
	0x0a, 0x6b, 0x15, 0x60, 0xd3, 0x53, 0xa9, 0x7d, 0xa2, 0x32, 0x71, 0x1b, 0xc5, 0xac, 0x86, 0xfa,
	0x19, 0x5f, 0x66, 0x33, 0x21, 0x8d, 0x40, 0xde, 0x41, 0x72, 0x3a, 0x84, 0xfd, 0x8c, 0x3f, 0x66,
	0xcd, 0x4f, 0xc6, 0x9e, 0x11, 0x75, 0x17, 0xa9, 0x59, 0x02, 0xfa, 0x19, 0xdf, 0x64, 0x6d, 0x07,
	0xf6, 0x5c, 0xa5, 0x90, 0x38, 0x2f, 0x7d, 0xe5, 0xc4, 0xf4, 0x6a, 0xa3, 0x77, 0x77, 0x30, 0x1f,
	0xd1, 0x43, 0x04, 0xf9, 0x12, 0x9b, 0x2e, 0xcc, 0x50, 0xe5, 0x20, 0x66, 0x30, 0xa7, 0x18, 0x85,
	0xac, 0x4a, 0x6b, 0xce, 0x95, 0x4e, 0x21, 0xb8, 0xcf, 0x52, 0x56, 0x35, 0x44, 0x59, 0xa5, 0xca,
	0x5f, 0x04, 0xb2, 0x49, 0x59, 0x85, 0x90, 0x08, 0x69, 0x41, 0x06, 0x82, 0x11, 0x11, 0xc2, 0x7e,
	0xc6, 0xb7, 0xd9, 0xfd, 0x3a, 0xa3, 0xd2, 0x9a, 0xac, 0x4a, 0xc3, 0x7e, 0x9d, 0x68, 0xe1, 0xba,
	0x0b, 0x91, 0x3a, 0x20, 0xa6, 0x9f, 0x39, 0xbe, 0xc6, 0xe6, 0x52, 0xa3, 0xbd, 0x4c, 0x7d, 0xa2,
	0x65, 0x01, 0x62, 0x0e, 0x85, 0xad, 0x88, 0x7d, 0x2f, 0x0b, 0x08, 0x9b, 0xac, 0x25, 0x71, 0x17,
	0xf3, 0x28, 0x9a, 0x8f, 0xe8, 0x77, 0xb4, 0x99, 0xa7, 0x6c, 0xde, 0xc2, 0x09, 0x58, 0x0b, 0x96,
	0xac, 0xda, 0xa8, 0x9a, 0xab, 0x41, 0xf4, 0x7a, 0xc6, 0xee, 0x5d, 0x89, 0xa2, 0xd9, 0x3d, 0x94,
	0xb5, 0x6b, 0x38, 0xba, 0x2d, 0xb1, 0x69, 0x0b, 0x85, 0xb4, 0x67, 0xa2, 0x43, 0x47, 0x46, 0x11,
	0x7f, 0xc2, 0x98, 0x72, 0x09, 0x68, 0x39, 0xcc, 0x21, 0x13, 0x0b, 0x78, 0xda, 0x4d, 0xe5, 0xde,
	0x13, 0x10, 0xaa, 0xa5, 0x5c, 0x92, 0x41, 0x0e, 0x1e, 0x04, 0x47, 0x76, 0x56, 0xb9, 0x77, 0x18,
	0x07, 0xcf, 0x58, 0xa5, 0xfb, 0xc8, 0xc4, 0x88, 0xbf, 0x60, 0x0b, 0x16, 0x46, 0xca, 0x79, 0x2b,
	0xbd, 0x32, 0x3a, 0x39, 0x31, 0xb6, 0x10, 0x8b, 0xb8, 0x6c, 0x67, 0x9c, 0xf8, 0x60, 0x6c, 0x11,
	0x6a, 0x76, 0x0a, 0x32, 0xf7, 0xa7, 0x49, 0x0a, 0xd6, 0x8b, 0x07, 0x28, 0x63, 0x04, 0xed, 0x83,
	0xf5, 0x7c, 0x97, 0x2d, 0x8f, 0x09, 0x12, 0xf8, 0x5c, 0x2a, 0x7b, 0x91, 0x64, 0xd2, 0x83, 0x58,
	0x42, 0xf1, 0xe2, 0xb5, 0xf8, 0x3d, 0x92, 0xef, 0xa4, 0x07, 0xfe, 0x8a, 0x71, 0xf8, 0x2c, 0x0b,
	0xa5, 0x29, 0x07, 0x0b, 0xa5, 0xb1, 0x5e, 0x2c, 0x53, 0xdd, 0xc6, 0x98, 0x01, 0x12, 0xfc, 0x25,
	0xe3, 0x1f, 0xcd, 0x30, 0x71, 0xa0, 0x95, 0xb1, 0xa1, 0x45, 0x52, 0x69, 0x33, 0x21, 0x28, 0xe9,
	0x8f, 0x66, 0x78, 0x58, 0x13, 0xfb, 0xd2, 0x66, 0x61, 0x87, 0xa5, 0x71, 0x2a, 0xfc, 0x5f, 0xe6,
	0x89, 0x57, 0x3e, 0x07, 0x27, 0x1e, 0x92, 0xf8, 0x9a, 0x38, 0x42, 0x3c, 0xec, 0x30, 0xb5, 0x20,
	0x3d, 0x24, 0x5e, 0x15, 0x20, 0x1e, 0xd1, 0x0e, 0x09, 0x3a, 0x52, 0x05, 0xf0, 0x0d, 0xd6, 0x8e,
	0x82, 0x7a, 0x64, 0x1e, 0x63, 0x0f, 0xce, 0x11, 0x7a, 0x4c, 0x83, 0xb3, 0xc2, 0x5a, 0x55, 0x99,
	0x5d, 0xd9, 0xfc, 0x8f, 0x6c, 0x08, 0xaa, 0x6d, 0xa2, 0xa0, 0xb6, 0x79, 0x42, 0x36, 0x84, 0x46,
	0x1b, 0xc1, 0x66, 0xce, 0xc1, 0x3a, 0x65, 0xb4, 0xe8, 0x62, 0xd5, 0xea, 0x30, 0x30, 0x32, 0xcb,
	0x2c, 0x38, 0x27, 0x56, 0xd0, 0xbc, 0x0e, 0x43, 0xc7, 0xd2, 0x89, 0x5d, 0x8d, 0xe5, 0x2a, 0x8d,
	0x65, 0x44, 0xe3, 0x58, 0xee, 0xb0, 0x07, 0x4a, 0x7b, 0xd0, 0xf1, 0x58, 0xdc, 0x99, 0xca, 0x73,
	0x9c, 0x96, 0x35, 0xb4, 0xbb, 0x3f, 0x46, 0x1e, 0x06, 0x2e, 0xcc, 0x4b, 0x87, 0xdd, 0x96, 0x23,
	0x10, 0xeb, 0xe8, 0x17, 0x7e, 0xf2, 0x87, 0x0c, 0xef, 0x83, 0x24, 0xc0, 0x4f, 0x29, 0xc3, 0x10,
	0xef, 0x8d, 0x20, 0x1c, 0xbb, 0x4c, 0xbd, 0x3a, 0xa7, 0x92, 0xc6, 0x54, 0x36, 0x50, 0xd3, 0xb9,
	0x26, 0x62, 0x36, 0x8f, 0x59, 0x73, 0x28, 0xf5, 0x19, 0xcd, 0xce, 0x26, 0x66, 0x30, 0x1b, 0x00,
	0x9c, 0x9b, 0x65, 0x36, 0x43, 0xa4, 0x11, 0x5b, 0x34, 0x0f, 0x48, 0x99, 0xd0, 0x36, 0xc6, 0x9f,
	0x82, 0xc5, 0x66, 0x53, 0x27, 0x2a, 0x95, 0x1e, 0x9c, 0x78, 0x46, 0x6d, 0x83, 0xcc, 0xfe, 0x18,
	0x11, 0xe6, 0xcf, 0x81, 0xf7, 0x39, 0x14, 0xa0, 0x7d, 0xe2, 0x2f, 0x4a, 0x10, 0x3d, 0xcc, 0xa7,
	0x7d, 0x0d, 0x1f, 0x5d, 0x94, 0x98, 0xfa, 0x98, 0xb0, 0xb4, 0xa6, 0x28, 0xbd, 0x78, 0x4e, 0x1d,
	0x73, 0x4d, 0x1c, 0x20, 0xce, 0x9f, 0xb3, 0x8e, 0xab, 0x86, 0xc6, 0x66, 0xa1, 0x47, 0x81, 0x6c,
	0xff, 0x8f, 0xb6, 0xf7, 0xc6, 0x70, 0xf4, 0x5d, 0x63, 0x73, 0x32, 0x4d, 0xa1, 0xf4, 0x49, 0x6a,
	0x2a, 0xed, 0xc5, 0x0b, 0x2c, 0x79, 0x8b, 0xb0, 0xfd, 0x00, 0x85, 0xbd, 0xaa, 0x8c, 0xfa, 0xf9,
	0x25, 0xed, 0x55, 0x65, 0xd8, 0xc5, 0xbb, 0x6c, 0x39, 0x12, 0xc9, 0xb9, 0xcc, 0x55, 0x16, 0xda,
	0xbe, 0x04, 0xab, 0x4c, 0x26, 0x5e, 0xd1, 0x64, 0x91, 0xf0, 0x87, 0x48, 0x1e, 0x20, 0xc7, 0xbb,
	0xac, 0x55, 0xff, 0x4d, 0x15, 0x23, 0xb1, 0x8d, 0xd2, 0x26, 0x49, 0xfb, 0xc5, 0x28, 0x74, 0x8b,
	0x4c, 0x31, 0x9b, 0xba, 0x44, 0xaf, 0xa9, 0x5b, 0x22, 0x1a, 0xeb, 0x13, 0xae, 0x41, 0xd0, 0xde,
	0x42, 0x52, 0x77, 0xdd, 0x17, 0xf1, 0x1a, 0x44, 0x74, 0x2f, 0xf6, 0xde, 0x13, 0xc6, 0xa2, 0x2c,
	0xd7, 0x23, 0xf1, 0x25, 0x2d, 0x46, 0xc8, 0xb7, 0x7a, 0x34, 0x4e, 0x4b, 0x2f, 0x76, 0x26, 0x68,
	0x89, 0x63, 0x6d, 0x42, 0x7f, 0x7b, 0x28, 0x13, 0xbc, 0xe0, 0xf1, 0x2c, 0xdf, 0x50, 0xcb, 0xd4,
	0xcc, 0x9e, 0x05, 0x89, 0x87, 0xb9, 0xc9, 0xda, 0xa5, 0x8d, 0x8f, 0x8f, 0xf5, 0x4a, 0x8f, 0xc4,
	0x57, 0xab, 0x8d, 0x5e, 0x63, 0x30, 0x8f, 0xe8, 0x61, 0x04, 0xc3, 0x9a, 0x24, 0xab, 0xb4, 0xf2,
	0x62, 0x17, 0x25, 0x4d, 0x44, 0x8e, 0xb5, 0xf2, 0xeb, 0x5b, 0x6c, 0x71, 0xf2, 0x61, 0xfd, 0xa0,
	0x72, 0x0f, 0x76, 0xec, 0x5d, 0xbd, 0x13, 0xde, 0xd5, 0xf5, 0xb7, 0x6c, 0xe9, 0xe6, 0x03, 0xec,
	0x4a, 0xa3, 0x1d, 0xdc, 0x54, 0x86, 0xc9, 0x74, 0x55, 0x9a, 0x86, 0x33, 0x0a, 0x8f, 0xf0, 0xec,
	0xa0, 0x0e, 0x77, 0x7e, 0x9e, 0x62, 0xed, 0x49, 0x13, 0x3e, 0x64, 0x0b, 0x5f, 0x83, 0xbf, 0x01,
	0x6e, 0x6c, 0x4f, 0x3e, 0xff, 0xdb, 0x7f, 0x95, 0xe1, 0xa3, 0xcd, 0xbf, 0x57, 0xc5, 0x0f, 0x84,
	0xf5, 0x5b, 0x7c, 0xc4, 0x16, 0xf7, 0xaf, 0xee, 0xa6, 0xb1, 0x65, 0xfe, 0x9d, 0xc1, 0xa3, 0xad,
	0x7f, 0x92, 0xd1, 0x39, 0xd0, 0x42, 0xc7, 0x57, 0xb7, 0xd7, 0x7f, 0xb8, 0xd0, 0xdb, 0xce, 0x2f,
	0x97, 0xdd, 0xc6, 0xaf, 0x97, 0xdd, 0xc6, 0xef, 0x97, 0xdd, 0xc6, 0x4f, 0x7f, 0x74, 0x6f, 0x0d,
	0xa7, 0xf1, 0xbb, 0xe9, 0xcd, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb0, 0x13, 0x90, 0x35, 0x63,
	0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserTechnicianClient is the client API for UserTechnician service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserTechnicianClient interface {
	GetUserTechnician(ctx context.Context, in *UserTechnicianFilter, opts ...grpc.CallOption) (*UserTechnicianRequest, error)
	CreateUserTechnician(ctx context.Context, in *UserTechnicianRequest, opts ...grpc.CallOption) (*UserTechnicianResponse, error)
	UpdateUserTechnician(ctx context.Context, in *UserTechnicianRequest, opts ...grpc.CallOption) (*UserTechnicianResponse, error)
}

type userTechnicianClient struct {
	cc *grpc.ClientConn
}

func NewUserTechnicianClient(cc *grpc.ClientConn) UserTechnicianClient {
	return &userTechnicianClient{cc}
}

func (c *userTechnicianClient) GetUserTechnician(ctx context.Context, in *UserTechnicianFilter, opts ...grpc.CallOption) (*UserTechnicianRequest, error) {
	out := new(UserTechnicianRequest)
	err := c.cc.Invoke(ctx, "/JuranwuyouUser.UserTechnician/GetUserTechnician", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userTechnicianClient) CreateUserTechnician(ctx context.Context, in *UserTechnicianRequest, opts ...grpc.CallOption) (*UserTechnicianResponse, error) {
	out := new(UserTechnicianResponse)
	err := c.cc.Invoke(ctx, "/JuranwuyouUser.UserTechnician/CreateUserTechnician", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userTechnicianClient) UpdateUserTechnician(ctx context.Context, in *UserTechnicianRequest, opts ...grpc.CallOption) (*UserTechnicianResponse, error) {
	out := new(UserTechnicianResponse)
	err := c.cc.Invoke(ctx, "/JuranwuyouUser.UserTechnician/UpdateUserTechnician", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserTechnicianServer is the server API for UserTechnician service.
type UserTechnicianServer interface {
	GetUserTechnician(context.Context, *UserTechnicianFilter) (*UserTechnicianRequest, error)
	CreateUserTechnician(context.Context, *UserTechnicianRequest) (*UserTechnicianResponse, error)
	UpdateUserTechnician(context.Context, *UserTechnicianRequest) (*UserTechnicianResponse, error)
}

// UnimplementedUserTechnicianServer can be embedded to have forward compatible implementations.
type UnimplementedUserTechnicianServer struct {
}

func (*UnimplementedUserTechnicianServer) GetUserTechnician(ctx context.Context, req *UserTechnicianFilter) (*UserTechnicianRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserTechnician not implemented")
}
func (*UnimplementedUserTechnicianServer) CreateUserTechnician(ctx context.Context, req *UserTechnicianRequest) (*UserTechnicianResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserTechnician not implemented")
}
func (*UnimplementedUserTechnicianServer) UpdateUserTechnician(ctx context.Context, req *UserTechnicianRequest) (*UserTechnicianResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserTechnician not implemented")
}

func RegisterUserTechnicianServer(s *grpc.Server, srv UserTechnicianServer) {
	s.RegisterService(&_UserTechnician_serviceDesc, srv)
}

func _UserTechnician_GetUserTechnician_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserTechnicianFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserTechnicianServer).GetUserTechnician(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/JuranwuyouUser.UserTechnician/GetUserTechnician",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserTechnicianServer).GetUserTechnician(ctx, req.(*UserTechnicianFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserTechnician_CreateUserTechnician_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserTechnicianRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserTechnicianServer).CreateUserTechnician(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/JuranwuyouUser.UserTechnician/CreateUserTechnician",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserTechnicianServer).CreateUserTechnician(ctx, req.(*UserTechnicianRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserTechnician_UpdateUserTechnician_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserTechnicianRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserTechnicianServer).UpdateUserTechnician(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/JuranwuyouUser.UserTechnician/UpdateUserTechnician",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserTechnicianServer).UpdateUserTechnician(ctx, req.(*UserTechnicianRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserTechnician_serviceDesc = grpc.ServiceDesc{
	ServiceName: "JuranwuyouUser.UserTechnician",
	HandlerType: (*UserTechnicianServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserTechnician",
			Handler:    _UserTechnician_GetUserTechnician_Handler,
		},
		{
			MethodName: "CreateUserTechnician",
			Handler:    _UserTechnician_CreateUserTechnician_Handler,
		},
		{
			MethodName: "UpdateUserTechnician",
			Handler:    _UserTechnician_UpdateUserTechnician_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/JuranwuyouUseruserTechnician.proto",
}

func (m *UserTechnicianRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserTechnicianRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserTechnicianRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PriceUnit != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.PriceUnit))))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa9
	}
	if m.PriceStarting != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.PriceStarting))))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa1
	}
	if m.OverstepAreaType != 0 {
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64(m.OverstepAreaType))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	if len(m.CentreLat) > 0 {
		i -= len(m.CentreLat)
		copy(dAtA[i:], m.CentreLat)
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64(len(m.CentreLat)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	if len(m.CentreLng) > 0 {
		i -= len(m.CentreLng)
		copy(dAtA[i:], m.CentreLng)
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64(len(m.CentreLng)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x8a
	}
	if len(m.CentreAddress) > 0 {
		i -= len(m.CentreAddress)
		copy(dAtA[i:], m.CentreAddress)
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64(len(m.CentreAddress)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x82
	}
	if m.AccountStatus != 0 {
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64(m.AccountStatus))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf8
	}
	if len(m.IdCardImg) > 0 {
		i -= len(m.IdCardImg)
		copy(dAtA[i:], m.IdCardImg)
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64(len(m.IdCardImg)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf2
	}
	if len(m.IdCardValidityPeriod) > 0 {
		i -= len(m.IdCardValidityPeriod)
		copy(dAtA[i:], m.IdCardValidityPeriod)
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64(len(m.IdCardValidityPeriod)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	if len(m.IdCard) > 0 {
		i -= len(m.IdCard)
		copy(dAtA[i:], m.IdCard)
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64(len(m.IdCard)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe2
	}
	if m.AcceptCount != 0 {
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64((uint64(m.AcceptCount)<<1)^uint64((m.AcceptCount>>63))))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd8
	}
	if m.SubordinateType != 0 {
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64(m.SubordinateType))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd0
	}
	if len(m.SettlementPrompt) > 0 {
		i -= len(m.SettlementPrompt)
		copy(dAtA[i:], m.SettlementPrompt)
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64(len(m.SettlementPrompt)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	if m.SettlementType != 0 {
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64(m.SettlementType))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc0
	}
	if len(m.OtherCertificates) > 0 {
		i -= len(m.OtherCertificates)
		copy(dAtA[i:], m.OtherCertificates)
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64(len(m.OtherCertificates)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xba
	}
	if len(m.BankNo) > 0 {
		i -= len(m.BankNo)
		copy(dAtA[i:], m.BankNo)
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64(len(m.BankNo)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb2
	}
	if len(m.BankName) > 0 {
		i -= len(m.BankName)
		copy(dAtA[i:], m.BankName)
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64(len(m.BankName)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xaa
	}
	if m.ActivationStatus != 0 {
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64(m.ActivationStatus))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa0
	}
	if m.WorkAge != 0 {
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64(m.WorkAge))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x98
	}
	if m.Age != 0 {
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64(m.Age))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x90
	}
	if len(m.IntentionalSkillIds) > 0 {
		i -= len(m.IntentionalSkillIds)
		copy(dAtA[i:], m.IntentionalSkillIds)
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64(len(m.IntentionalSkillIds)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	if m.ExamineStatus != 0 {
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64(m.ExamineStatus))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	if m.Version != 0 {
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if m.UpdateUserId != 0 {
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64((uint64(m.UpdateUserId)<<1)^uint64((m.UpdateUserId>>63))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if len(m.UpdateTime) > 0 {
		i -= len(m.UpdateTime)
		copy(dAtA[i:], m.UpdateTime)
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64(len(m.UpdateTime)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if m.CreateUserId != 0 {
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64((uint64(m.CreateUserId)<<1)^uint64((m.CreateUserId>>63))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd8
	}
	if len(m.CreateTime) > 0 {
		i -= len(m.CreateTime)
		copy(dAtA[i:], m.CreateTime)
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64(len(m.CreateTime)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if len(m.PositionalTitles) > 0 {
		i -= len(m.PositionalTitles)
		copy(dAtA[i:], m.PositionalTitles)
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64(len(m.PositionalTitles)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if len(m.JobSeniorityCard) > 0 {
		i -= len(m.JobSeniorityCard)
		copy(dAtA[i:], m.JobSeniorityCard)
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64(len(m.JobSeniorityCard)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.ExaminationReport) > 0 {
		i -= len(m.ExaminationReport)
		copy(dAtA[i:], m.ExaminationReport)
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64(len(m.ExaminationReport)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.HealthCertExpiryDate) > 0 {
		i -= len(m.HealthCertExpiryDate)
		copy(dAtA[i:], m.HealthCertExpiryDate)
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64(len(m.HealthCertExpiryDate)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.HealthCert) > 0 {
		i -= len(m.HealthCert)
		copy(dAtA[i:], m.HealthCert)
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64(len(m.HealthCert)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.RegistrationForm) > 0 {
		i -= len(m.RegistrationForm)
		copy(dAtA[i:], m.RegistrationForm)
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64(len(m.RegistrationForm)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.Status != 0 {
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.IsDelete != 0 {
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64(m.IsDelete))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.IsEnabled != 0 {
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64(m.IsEnabled))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.Remark) > 0 {
		i -= len(m.Remark)
		copy(dAtA[i:], m.Remark)
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64(len(m.Remark)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.ReferrerMobile) > 0 {
		i -= len(m.ReferrerMobile)
		copy(dAtA[i:], m.ReferrerMobile)
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64(len(m.ReferrerMobile)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.ReferrerName) > 0 {
		i -= len(m.ReferrerName)
		copy(dAtA[i:], m.ReferrerName)
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64(len(m.ReferrerName)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.ContactMobile) > 0 {
		i -= len(m.ContactMobile)
		copy(dAtA[i:], m.ContactMobile)
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64(len(m.ContactMobile)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.ContactName) > 0 {
		i -= len(m.ContactName)
		copy(dAtA[i:], m.ContactName)
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64(len(m.ContactName)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.ServiceProductIds) > 0 {
		i -= len(m.ServiceProductIds)
		copy(dAtA[i:], m.ServiceProductIds)
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64(len(m.ServiceProductIds)))
		i--
		dAtA[i] = 0x5a
	}
	if m.AreaId != 0 {
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64((uint64(m.AreaId)<<1)^uint64((m.AreaId>>63))))
		i--
		dAtA[i] = 0x50
	}
	if m.CityId != 0 {
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64((uint64(m.CityId)<<1)^uint64((m.CityId>>63))))
		i--
		dAtA[i] = 0x48
	}
	if m.ProvinceId != 0 {
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64((uint64(m.ProvinceId)<<1)^uint64((m.ProvinceId>>63))))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Mobile) > 0 {
		i -= len(m.Mobile)
		copy(dAtA[i:], m.Mobile)
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64(len(m.Mobile)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ServiceStatus != 0 {
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64(m.ServiceStatus))
		i--
		dAtA[i] = 0x30
	}
	if m.WorkerId != 0 {
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64((uint64(m.WorkerId)<<1)^uint64((m.WorkerId>>63))))
		i--
		dAtA[i] = 0x28
	}
	if m.UserId != 0 {
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64((uint64(m.UserId)<<1)^uint64((m.UserId>>63))))
		i--
		dAtA[i] = 0x20
	}
	if m.MerchantId != 0 {
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64((uint64(m.MerchantId)<<1)^uint64((m.MerchantId>>63))))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64((uint64(m.Id)<<1)^uint64((m.Id>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserTechnicianFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserTechnicianFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserTechnicianFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserTechnicianResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserTechnicianResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserTechnicianResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintJuranwuyouUseruserTechnician(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintJuranwuyouUseruserTechnician(dAtA []byte, offset int, v uint64) int {
	offset -= sovJuranwuyouUseruserTechnician(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UserTechnicianRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sozJuranwuyouUseruserTechnician(uint64(m.Id))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovJuranwuyouUseruserTechnician(uint64(l))
	}
	if m.MerchantId != 0 {
		n += 1 + sozJuranwuyouUseruserTechnician(uint64(m.MerchantId))
	}
	if m.UserId != 0 {
		n += 1 + sozJuranwuyouUseruserTechnician(uint64(m.UserId))
	}
	if m.WorkerId != 0 {
		n += 1 + sozJuranwuyouUseruserTechnician(uint64(m.WorkerId))
	}
	if m.ServiceStatus != 0 {
		n += 1 + sovJuranwuyouUseruserTechnician(uint64(m.ServiceStatus))
	}
	l = len(m.Mobile)
	if l > 0 {
		n += 1 + l + sovJuranwuyouUseruserTechnician(uint64(l))
	}
	if m.ProvinceId != 0 {
		n += 1 + sozJuranwuyouUseruserTechnician(uint64(m.ProvinceId))
	}
	if m.CityId != 0 {
		n += 1 + sozJuranwuyouUseruserTechnician(uint64(m.CityId))
	}
	if m.AreaId != 0 {
		n += 1 + sozJuranwuyouUseruserTechnician(uint64(m.AreaId))
	}
	l = len(m.ServiceProductIds)
	if l > 0 {
		n += 1 + l + sovJuranwuyouUseruserTechnician(uint64(l))
	}
	l = len(m.ContactName)
	if l > 0 {
		n += 1 + l + sovJuranwuyouUseruserTechnician(uint64(l))
	}
	l = len(m.ContactMobile)
	if l > 0 {
		n += 1 + l + sovJuranwuyouUseruserTechnician(uint64(l))
	}
	l = len(m.ReferrerName)
	if l > 0 {
		n += 1 + l + sovJuranwuyouUseruserTechnician(uint64(l))
	}
	l = len(m.ReferrerMobile)
	if l > 0 {
		n += 1 + l + sovJuranwuyouUseruserTechnician(uint64(l))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 2 + l + sovJuranwuyouUseruserTechnician(uint64(l))
	}
	if m.IsEnabled != 0 {
		n += 2 + sovJuranwuyouUseruserTechnician(uint64(m.IsEnabled))
	}
	if m.IsDelete != 0 {
		n += 2 + sovJuranwuyouUseruserTechnician(uint64(m.IsDelete))
	}
	if m.Status != 0 {
		n += 2 + sovJuranwuyouUseruserTechnician(uint64(m.Status))
	}
	l = len(m.RegistrationForm)
	if l > 0 {
		n += 2 + l + sovJuranwuyouUseruserTechnician(uint64(l))
	}
	l = len(m.HealthCert)
	if l > 0 {
		n += 2 + l + sovJuranwuyouUseruserTechnician(uint64(l))
	}
	l = len(m.HealthCertExpiryDate)
	if l > 0 {
		n += 2 + l + sovJuranwuyouUseruserTechnician(uint64(l))
	}
	l = len(m.ExaminationReport)
	if l > 0 {
		n += 2 + l + sovJuranwuyouUseruserTechnician(uint64(l))
	}
	l = len(m.JobSeniorityCard)
	if l > 0 {
		n += 2 + l + sovJuranwuyouUseruserTechnician(uint64(l))
	}
	l = len(m.PositionalTitles)
	if l > 0 {
		n += 2 + l + sovJuranwuyouUseruserTechnician(uint64(l))
	}
	l = len(m.CreateTime)
	if l > 0 {
		n += 2 + l + sovJuranwuyouUseruserTechnician(uint64(l))
	}
	if m.CreateUserId != 0 {
		n += 2 + sozJuranwuyouUseruserTechnician(uint64(m.CreateUserId))
	}
	l = len(m.UpdateTime)
	if l > 0 {
		n += 2 + l + sovJuranwuyouUseruserTechnician(uint64(l))
	}
	if m.UpdateUserId != 0 {
		n += 2 + sozJuranwuyouUseruserTechnician(uint64(m.UpdateUserId))
	}
	if m.Version != 0 {
		n += 2 + sovJuranwuyouUseruserTechnician(uint64(m.Version))
	}
	l = len(m.Address)
	if l > 0 {
		n += 2 + l + sovJuranwuyouUseruserTechnician(uint64(l))
	}
	if m.ExamineStatus != 0 {
		n += 2 + sovJuranwuyouUseruserTechnician(uint64(m.ExamineStatus))
	}
	l = len(m.IntentionalSkillIds)
	if l > 0 {
		n += 2 + l + sovJuranwuyouUseruserTechnician(uint64(l))
	}
	if m.Age != 0 {
		n += 2 + sovJuranwuyouUseruserTechnician(uint64(m.Age))
	}
	if m.WorkAge != 0 {
		n += 2 + sovJuranwuyouUseruserTechnician(uint64(m.WorkAge))
	}
	if m.ActivationStatus != 0 {
		n += 2 + sovJuranwuyouUseruserTechnician(uint64(m.ActivationStatus))
	}
	l = len(m.BankName)
	if l > 0 {
		n += 2 + l + sovJuranwuyouUseruserTechnician(uint64(l))
	}
	l = len(m.BankNo)
	if l > 0 {
		n += 2 + l + sovJuranwuyouUseruserTechnician(uint64(l))
	}
	l = len(m.OtherCertificates)
	if l > 0 {
		n += 2 + l + sovJuranwuyouUseruserTechnician(uint64(l))
	}
	if m.SettlementType != 0 {
		n += 2 + sovJuranwuyouUseruserTechnician(uint64(m.SettlementType))
	}
	l = len(m.SettlementPrompt)
	if l > 0 {
		n += 2 + l + sovJuranwuyouUseruserTechnician(uint64(l))
	}
	if m.SubordinateType != 0 {
		n += 2 + sovJuranwuyouUseruserTechnician(uint64(m.SubordinateType))
	}
	if m.AcceptCount != 0 {
		n += 2 + sozJuranwuyouUseruserTechnician(uint64(m.AcceptCount))
	}
	l = len(m.IdCard)
	if l > 0 {
		n += 2 + l + sovJuranwuyouUseruserTechnician(uint64(l))
	}
	l = len(m.IdCardValidityPeriod)
	if l > 0 {
		n += 2 + l + sovJuranwuyouUseruserTechnician(uint64(l))
	}
	l = len(m.IdCardImg)
	if l > 0 {
		n += 2 + l + sovJuranwuyouUseruserTechnician(uint64(l))
	}
	if m.AccountStatus != 0 {
		n += 2 + sovJuranwuyouUseruserTechnician(uint64(m.AccountStatus))
	}
	l = len(m.CentreAddress)
	if l > 0 {
		n += 2 + l + sovJuranwuyouUseruserTechnician(uint64(l))
	}
	l = len(m.CentreLng)
	if l > 0 {
		n += 2 + l + sovJuranwuyouUseruserTechnician(uint64(l))
	}
	l = len(m.CentreLat)
	if l > 0 {
		n += 2 + l + sovJuranwuyouUseruserTechnician(uint64(l))
	}
	if m.OverstepAreaType != 0 {
		n += 2 + sovJuranwuyouUseruserTechnician(uint64(m.OverstepAreaType))
	}
	if m.PriceStarting != 0 {
		n += 10
	}
	if m.PriceUnit != 0 {
		n += 10
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserTechnicianFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovJuranwuyouUseruserTechnician(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserTechnicianResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovJuranwuyouUseruserTechnician(uint64(m.Id))
	}
	if m.Success {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovJuranwuyouUseruserTechnician(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozJuranwuyouUseruserTechnician(x uint64) (n int) {
	return sovJuranwuyouUseruserTechnician(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserTechnicianRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJuranwuyouUseruserTechnician
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserTechnicianRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserTechnicianRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Id = int64(v)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.MerchantId = int64(v)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.UserId = int64(v)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.WorkerId = int64(v)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceStatus", wireType)
			}
			m.ServiceStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceStatus |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mobile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mobile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvinceId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.ProvinceId = int64(v)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.CityId = int64(v)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.AreaId = int64(v)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceProductIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceProductIds = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactMobile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactMobile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferrerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReferrerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferrerMobile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReferrerMobile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			m.IsEnabled = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsEnabled |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDelete", wireType)
			}
			m.IsDelete = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsDelete |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistrationForm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegistrationForm = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthCert", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HealthCert = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthCertExpiryDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HealthCertExpiryDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExaminationReport", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExaminationReport = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSeniorityCard", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSeniorityCard = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionalTitles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PositionalTitles = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateUserId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.CreateUserId = int64(v)
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUserId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.UpdateUserId = int64(v)
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExamineStatus", wireType)
			}
			m.ExamineStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExamineStatus |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntentionalSkillIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IntentionalSkillIds = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Age", wireType)
			}
			m.Age = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Age |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkAge", wireType)
			}
			m.WorkAge = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkAge |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationStatus", wireType)
			}
			m.ActivationStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivationStatus |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BankName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BankNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherCertificates", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OtherCertificates = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementType", wireType)
			}
			m.SettlementType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SettlementType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementPrompt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SettlementPrompt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubordinateType", wireType)
			}
			m.SubordinateType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubordinateType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 43:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.AcceptCount = int64(v)
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdCard", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdCard = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdCardValidityPeriod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdCardValidityPeriod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdCardImg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdCardImg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 47:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountStatus", wireType)
			}
			m.AccountStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountStatus |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CentreAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CentreAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CentreLng", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CentreLng = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CentreLat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CentreLat = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverstepAreaType", wireType)
			}
			m.OverstepAreaType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OverstepAreaType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 52:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceStarting", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.PriceStarting = float64(math.Float64frombits(v))
		case 53:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceUnit", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.PriceUnit = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipJuranwuyouUseruserTechnician(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserTechnicianFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJuranwuyouUseruserTechnician
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserTechnicianFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserTechnicianFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipJuranwuyouUseruserTechnician(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserTechnicianResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJuranwuyouUseruserTechnician
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserTechnicianResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserTechnicianResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipJuranwuyouUseruserTechnician(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipJuranwuyouUseruserTechnician(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowJuranwuyouUseruserTechnician
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJuranwuyouUseruserTechnician
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthJuranwuyouUseruserTechnician
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupJuranwuyouUseruserTechnician
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthJuranwuyouUseruserTechnician
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthJuranwuyouUseruserTechnician        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowJuranwuyouUseruserTechnician          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupJuranwuyouUseruserTechnician = fmt.Errorf("proto: unexpected end of group")
)
