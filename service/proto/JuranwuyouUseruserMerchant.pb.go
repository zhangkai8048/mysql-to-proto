// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/JuranwuyouUseruserMerchant.proto

package JuranwuyouUser

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UserMerchantRequest struct {
	Id                   int64    `protobuf:"zigzag64,1,opt,name=id,proto3" json:"id,omitempty"`
	Code                 string   `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	UserId               int64    `protobuf:"zigzag64,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PassId               int64    `protobuf:"zigzag64,4,opt,name=pass_id,json=passId,proto3" json:"pass_id,omitempty"`
	Name                 string   `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Type                 int32    `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`
	Category             int32    `protobuf:"varint,7,opt,name=category,proto3" json:"category,omitempty"`
	CertNo               string   `protobuf:"bytes,8,opt,name=cert_no,json=certNo,proto3" json:"cert_no,omitempty"`
	LegalPersonName      string   `protobuf:"bytes,9,opt,name=legal_person_name,json=legalPersonName,proto3" json:"legal_person_name,omitempty"`
	IsCertification      int32    `protobuf:"varint,10,opt,name=is_certification,json=isCertification,proto3" json:"is_certification,omitempty"`
	ProvinceId           int64    `protobuf:"zigzag64,11,opt,name=province_id,json=provinceId,proto3" json:"province_id,omitempty"`
	CityId               int64    `protobuf:"zigzag64,12,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
	AreaId               int64    `protobuf:"zigzag64,13,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`
	CityIds              string   `protobuf:"bytes,14,opt,name=city_ids,json=cityIds,proto3" json:"city_ids,omitempty"`
	BusinessScope        string   `protobuf:"bytes,15,opt,name=business_scope,json=businessScope,proto3" json:"business_scope,omitempty"`
	ServiceCategoryIds   string   `protobuf:"bytes,16,opt,name=service_category_ids,json=serviceCategoryIds,proto3" json:"service_category_ids,omitempty"`
	Address              string   `protobuf:"bytes,17,opt,name=address,proto3" json:"address,omitempty"`
	AddressLng           float64  `protobuf:"fixed64,18,opt,name=address_lng,json=addressLng,proto3" json:"address_lng,omitempty"`
	AddressLat           float64  `protobuf:"fixed64,19,opt,name=address_lat,json=addressLat,proto3" json:"address_lat,omitempty"`
	Mobile               string   `protobuf:"bytes,20,opt,name=mobile,proto3" json:"mobile,omitempty"`
	BankName             string   `protobuf:"bytes,21,opt,name=bank_name,json=bankName,proto3" json:"bank_name,omitempty"`
	BankNo               string   `protobuf:"bytes,22,opt,name=bank_no,json=bankNo,proto3" json:"bank_no,omitempty"`
	IsAudit              int32    `protobuf:"varint,23,opt,name=is_audit,json=isAudit,proto3" json:"is_audit,omitempty"`
	IsEnabled            int32    `protobuf:"varint,24,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	IsDelete             int32    `protobuf:"varint,25,opt,name=is_delete,json=isDelete,proto3" json:"is_delete,omitempty"`
	MainPerson           string   `protobuf:"bytes,26,opt,name=main_person,json=mainPerson,proto3" json:"main_person,omitempty"`
	BusinessAddress      string   `protobuf:"bytes,27,opt,name=business_address,json=businessAddress,proto3" json:"business_address,omitempty"`
	CreditCode           string   `protobuf:"bytes,28,opt,name=credit_code,json=creditCode,proto3" json:"credit_code,omitempty"`
	TaxNo                string   `protobuf:"bytes,29,opt,name=tax_no,json=taxNo,proto3" json:"tax_no,omitempty"`
	CreateUserId         int64    `protobuf:"zigzag64,30,opt,name=create_user_id,json=createUserId,proto3" json:"create_user_id,omitempty"`
	CreateTime           string   `protobuf:"bytes,31,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateUserId         int64    `protobuf:"zigzag64,32,opt,name=update_user_id,json=updateUserId,proto3" json:"update_user_id,omitempty"`
	UpdateTime           string   `protobuf:"bytes,33,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Version              int32    `protobuf:"varint,34,opt,name=version,proto3" json:"version,omitempty"`
	OpenRemind           int32    `protobuf:"varint,35,opt,name=open_remind,json=openRemind,proto3" json:"open_remind,omitempty"`
	MerchantExtend       string   `protobuf:"bytes,36,opt,name=merchant_extend,json=merchantExtend,proto3" json:"merchant_extend,omitempty"`
	MerchantLevel        int32    `protobuf:"varint,37,opt,name=merchant_level,json=merchantLevel,proto3" json:"merchant_level,omitempty"`
	ParentId             int64    `protobuf:"zigzag64,38,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	AssetsType           int32    `protobuf:"varint,39,opt,name=assets_type,json=assetsType,proto3" json:"assets_type,omitempty"`
	SettlePartyId        int64    `protobuf:"zigzag64,40,opt,name=settle_party_id,json=settlePartyId,proto3" json:"settle_party_id,omitempty"`
	ServiceType          int32    `protobuf:"varint,41,opt,name=service_type,json=serviceType,proto3" json:"service_type,omitempty"`
	CooperationType      int32    `protobuf:"varint,42,opt,name=cooperation_type,json=cooperationType,proto3" json:"cooperation_type,omitempty"`
	Sort                 int32    `protobuf:"varint,43,opt,name=sort,proto3" json:"sort,omitempty"`
	SkillIds             string   `protobuf:"bytes,44,opt,name=skill_ids,json=skillIds,proto3" json:"skill_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserMerchantRequest) Reset()         { *m = UserMerchantRequest{} }
func (m *UserMerchantRequest) String() string { return proto.CompactTextString(m) }
func (*UserMerchantRequest) ProtoMessage()    {}
func (*UserMerchantRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1704835e13dde0dc, []int{0}
}
func (m *UserMerchantRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserMerchantRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserMerchantRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserMerchantRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserMerchantRequest.Merge(m, src)
}
func (m *UserMerchantRequest) XXX_Size() int {
	return m.Size()
}
func (m *UserMerchantRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserMerchantRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserMerchantRequest proto.InternalMessageInfo

func (m *UserMerchantRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserMerchantRequest) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *UserMerchantRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserMerchantRequest) GetPassId() int64 {
	if m != nil {
		return m.PassId
	}
	return 0
}

func (m *UserMerchantRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserMerchantRequest) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *UserMerchantRequest) GetCategory() int32 {
	if m != nil {
		return m.Category
	}
	return 0
}

func (m *UserMerchantRequest) GetCertNo() string {
	if m != nil {
		return m.CertNo
	}
	return ""
}

func (m *UserMerchantRequest) GetLegalPersonName() string {
	if m != nil {
		return m.LegalPersonName
	}
	return ""
}

func (m *UserMerchantRequest) GetIsCertification() int32 {
	if m != nil {
		return m.IsCertification
	}
	return 0
}

func (m *UserMerchantRequest) GetProvinceId() int64 {
	if m != nil {
		return m.ProvinceId
	}
	return 0
}

func (m *UserMerchantRequest) GetCityId() int64 {
	if m != nil {
		return m.CityId
	}
	return 0
}

func (m *UserMerchantRequest) GetAreaId() int64 {
	if m != nil {
		return m.AreaId
	}
	return 0
}

func (m *UserMerchantRequest) GetCityIds() string {
	if m != nil {
		return m.CityIds
	}
	return ""
}

func (m *UserMerchantRequest) GetBusinessScope() string {
	if m != nil {
		return m.BusinessScope
	}
	return ""
}

func (m *UserMerchantRequest) GetServiceCategoryIds() string {
	if m != nil {
		return m.ServiceCategoryIds
	}
	return ""
}

func (m *UserMerchantRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *UserMerchantRequest) GetAddressLng() float64 {
	if m != nil {
		return m.AddressLng
	}
	return 0
}

func (m *UserMerchantRequest) GetAddressLat() float64 {
	if m != nil {
		return m.AddressLat
	}
	return 0
}

func (m *UserMerchantRequest) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

func (m *UserMerchantRequest) GetBankName() string {
	if m != nil {
		return m.BankName
	}
	return ""
}

func (m *UserMerchantRequest) GetBankNo() string {
	if m != nil {
		return m.BankNo
	}
	return ""
}

func (m *UserMerchantRequest) GetIsAudit() int32 {
	if m != nil {
		return m.IsAudit
	}
	return 0
}

func (m *UserMerchantRequest) GetIsEnabled() int32 {
	if m != nil {
		return m.IsEnabled
	}
	return 0
}

func (m *UserMerchantRequest) GetIsDelete() int32 {
	if m != nil {
		return m.IsDelete
	}
	return 0
}

func (m *UserMerchantRequest) GetMainPerson() string {
	if m != nil {
		return m.MainPerson
	}
	return ""
}

func (m *UserMerchantRequest) GetBusinessAddress() string {
	if m != nil {
		return m.BusinessAddress
	}
	return ""
}

func (m *UserMerchantRequest) GetCreditCode() string {
	if m != nil {
		return m.CreditCode
	}
	return ""
}

func (m *UserMerchantRequest) GetTaxNo() string {
	if m != nil {
		return m.TaxNo
	}
	return ""
}

func (m *UserMerchantRequest) GetCreateUserId() int64 {
	if m != nil {
		return m.CreateUserId
	}
	return 0
}

func (m *UserMerchantRequest) GetCreateTime() string {
	if m != nil {
		return m.CreateTime
	}
	return ""
}

func (m *UserMerchantRequest) GetUpdateUserId() int64 {
	if m != nil {
		return m.UpdateUserId
	}
	return 0
}

func (m *UserMerchantRequest) GetUpdateTime() string {
	if m != nil {
		return m.UpdateTime
	}
	return ""
}

func (m *UserMerchantRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *UserMerchantRequest) GetOpenRemind() int32 {
	if m != nil {
		return m.OpenRemind
	}
	return 0
}

func (m *UserMerchantRequest) GetMerchantExtend() string {
	if m != nil {
		return m.MerchantExtend
	}
	return ""
}

func (m *UserMerchantRequest) GetMerchantLevel() int32 {
	if m != nil {
		return m.MerchantLevel
	}
	return 0
}

func (m *UserMerchantRequest) GetParentId() int64 {
	if m != nil {
		return m.ParentId
	}
	return 0
}

func (m *UserMerchantRequest) GetAssetsType() int32 {
	if m != nil {
		return m.AssetsType
	}
	return 0
}

func (m *UserMerchantRequest) GetSettlePartyId() int64 {
	if m != nil {
		return m.SettlePartyId
	}
	return 0
}

func (m *UserMerchantRequest) GetServiceType() int32 {
	if m != nil {
		return m.ServiceType
	}
	return 0
}

func (m *UserMerchantRequest) GetCooperationType() int32 {
	if m != nil {
		return m.CooperationType
	}
	return 0
}

func (m *UserMerchantRequest) GetSort() int32 {
	if m != nil {
		return m.Sort
	}
	return 0
}

func (m *UserMerchantRequest) GetSkillIds() string {
	if m != nil {
		return m.SkillIds
	}
	return ""
}

type UserMerchantFilter struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserMerchantFilter) Reset()         { *m = UserMerchantFilter{} }
func (m *UserMerchantFilter) String() string { return proto.CompactTextString(m) }
func (*UserMerchantFilter) ProtoMessage()    {}
func (*UserMerchantFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_1704835e13dde0dc, []int{1}
}
func (m *UserMerchantFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserMerchantFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserMerchantFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserMerchantFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserMerchantFilter.Merge(m, src)
}
func (m *UserMerchantFilter) XXX_Size() int {
	return m.Size()
}
func (m *UserMerchantFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_UserMerchantFilter.DiscardUnknown(m)
}

var xxx_messageInfo_UserMerchantFilter proto.InternalMessageInfo

func (m *UserMerchantFilter) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type UserMerchantResponse struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Success              bool     `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserMerchantResponse) Reset()         { *m = UserMerchantResponse{} }
func (m *UserMerchantResponse) String() string { return proto.CompactTextString(m) }
func (*UserMerchantResponse) ProtoMessage()    {}
func (*UserMerchantResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1704835e13dde0dc, []int{2}
}
func (m *UserMerchantResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserMerchantResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserMerchantResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserMerchantResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserMerchantResponse.Merge(m, src)
}
func (m *UserMerchantResponse) XXX_Size() int {
	return m.Size()
}
func (m *UserMerchantResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserMerchantResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserMerchantResponse proto.InternalMessageInfo

func (m *UserMerchantResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserMerchantResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*UserMerchantRequest)(nil), "JuranwuyouUser.UserMerchantRequest")
	proto.RegisterType((*UserMerchantFilter)(nil), "JuranwuyouUser.UserMerchantFilter")
	proto.RegisterType((*UserMerchantResponse)(nil), "JuranwuyouUser.UserMerchantResponse")
}

func init() {
	proto.RegisterFile("proto/JuranwuyouUseruserMerchant.proto", fileDescriptor_1704835e13dde0dc)
}

var fileDescriptor_1704835e13dde0dc = []byte{
	// 891 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xe1, 0x6e, 0x1b, 0x45,
	0x10, 0x8e, 0x43, 0x62, 0x3b, 0x93, 0xc4, 0x4e, 0xb7, 0x69, 0xb3, 0x4d, 0x69, 0xea, 0xba, 0x69,
	0xea, 0x14, 0x14, 0x10, 0xbc, 0x00, 0x25, 0x14, 0x64, 0x54, 0xa2, 0xca, 0x34, 0xff, 0x90, 0x4e,
	0xeb, 0xbb, 0x21, 0xac, 0x7a, 0xbe, 0x3d, 0x76, 0xf7, 0x42, 0xf2, 0x26, 0x3c, 0x07, 0x4f, 0xc1,
	0x4f, 0x1e, 0x01, 0x85, 0x5f, 0xbc, 0x05, 0x9a, 0x99, 0x3b, 0xd7, 0x46, 0xa8, 0xe2, 0x4f, 0xff,
	0xed, 0x7c, 0xdf, 0xb7, 0xdf, 0xde, 0xec, 0xce, 0xcc, 0xc1, 0x51, 0xe9, 0x5d, 0x74, 0x9f, 0x7c,
	0x5b, 0x79, 0x53, 0xfc, 0x52, 0x5d, 0xbb, 0xea, 0x3c, 0xa0, 0xaf, 0x02, 0xfa, 0xef, 0xd0, 0xa7,
	0x3f, 0x99, 0x22, 0x9e, 0xb0, 0x40, 0xf5, 0x96, 0x15, 0xc3, 0xbf, 0x01, 0x6e, 0x9f, 0x2f, 0xc8,
	0x26, 0xf8, 0x73, 0x85, 0x21, 0xaa, 0x1e, 0xac, 0xda, 0x4c, 0xb7, 0x06, 0xad, 0x91, 0x9a, 0xac,
	0xda, 0x4c, 0x29, 0x58, 0x4b, 0x5d, 0x86, 0x7a, 0x75, 0xd0, 0x1a, 0x6d, 0x4c, 0x78, 0xad, 0xf6,
	0xa0, 0x43, 0x27, 0x24, 0x36, 0xd3, 0x1f, 0xb0, 0xb0, 0x4d, 0xe1, 0x38, 0x23, 0xa2, 0x34, 0x21,
	0x10, 0xb1, 0x26, 0x04, 0x85, 0x63, 0x76, 0x29, 0xcc, 0x0c, 0xf5, 0xba, 0xb8, 0xd0, 0x9a, 0xb0,
	0x78, 0x5d, 0xa2, 0x6e, 0x0f, 0x5a, 0xa3, 0xf5, 0x09, 0xaf, 0xd5, 0x3e, 0x74, 0x53, 0x13, 0xf1,
	0xc2, 0xf9, 0x6b, 0xdd, 0x61, 0x7c, 0x1e, 0x93, 0x79, 0x8a, 0x3e, 0x26, 0x85, 0xd3, 0x5d, 0xb6,
	0x69, 0x53, 0x78, 0xe6, 0xd4, 0x33, 0xb8, 0x95, 0xe3, 0x85, 0xc9, 0x93, 0x12, 0x7d, 0x70, 0x45,
	0xc2, 0x27, 0x6d, 0xb0, 0xa4, 0xcf, 0xc4, 0x2b, 0xc6, 0xcf, 0xe8, 0xd0, 0x63, 0xd8, 0xb1, 0x21,
	0xa1, 0x8d, 0xf6, 0x47, 0x9b, 0x9a, 0x68, 0x5d, 0xa1, 0x81, 0x0f, 0xea, 0xdb, 0x70, 0xba, 0x08,
	0xab, 0x87, 0xb0, 0x59, 0x7a, 0x77, 0x69, 0x8b, 0x14, 0x29, 0xa1, 0x4d, 0x4e, 0x08, 0x1a, 0x48,
	0xb2, 0x4d, 0x6d, 0xbc, 0x26, 0x72, 0x4b, 0xb2, 0xa5, 0x50, 0x08, 0xe3, 0xd1, 0x10, 0xb1, 0x2d,
	0x04, 0x85, 0xe3, 0x4c, 0xdd, 0x83, 0x6e, 0xbd, 0x23, 0xe8, 0x1e, 0x7f, 0x60, 0x47, 0xb6, 0x04,
	0xf5, 0x04, 0x7a, 0xd3, 0x2a, 0xd8, 0x02, 0x43, 0x48, 0x42, 0xea, 0x4a, 0xd4, 0x7d, 0x16, 0x6c,
	0x37, 0xe8, 0xf7, 0x04, 0xaa, 0x4f, 0x61, 0x37, 0xa0, 0xbf, 0xb4, 0x29, 0x26, 0xcd, 0xc5, 0xb0,
	0xdb, 0x0e, 0x8b, 0x55, 0xcd, 0x9d, 0xd6, 0x14, 0x19, 0x6b, 0xe8, 0x98, 0x2c, 0xf3, 0x18, 0x82,
	0xbe, 0x25, 0x47, 0xd6, 0x21, 0x25, 0x58, 0x2f, 0x93, 0xbc, 0xb8, 0xd0, 0x6a, 0xd0, 0x1a, 0xb5,
	0x26, 0x50, 0x43, 0x2f, 0x8b, 0x8b, 0x25, 0x81, 0x89, 0xfa, 0xf6, 0xb2, 0xc0, 0x44, 0x75, 0x17,
	0xda, 0x33, 0x37, 0xb5, 0x39, 0xea, 0x5d, 0x79, 0x11, 0x89, 0xd4, 0x7d, 0xd8, 0x98, 0x9a, 0xe2,
	0x8d, 0xbc, 0xc4, 0x1d, 0xa6, 0xba, 0x04, 0xf0, 0x13, 0xec, 0x41, 0x47, 0x48, 0xa7, 0xef, 0xca,
	0x2e, 0xa6, 0x1c, 0xdd, 0x8e, 0x0d, 0x89, 0xa9, 0x32, 0x1b, 0xf5, 0x1e, 0xbf, 0x49, 0xc7, 0x86,
	0xe7, 0x14, 0xaa, 0x07, 0x00, 0x36, 0x24, 0x58, 0x98, 0x69, 0x8e, 0x99, 0xd6, 0x4c, 0x6e, 0xd8,
	0xf0, 0x42, 0x00, 0x3a, 0xcf, 0x86, 0x24, 0xc3, 0x1c, 0x23, 0xea, 0x7b, 0x52, 0x37, 0x36, 0x7c,
	0xc5, 0x31, 0x65, 0x31, 0x33, 0xb6, 0xa8, 0xab, 0x43, 0xef, 0xf3, 0x99, 0x40, 0x90, 0xd4, 0x05,
	0xd5, 0xc4, 0xfc, 0xea, 0x9b, 0xab, 0xba, 0x2f, 0xe5, 0xd3, 0xe0, 0xcf, 0xdf, 0x5e, 0x59, 0xea,
	0x31, 0xb3, 0x31, 0xe1, 0xa6, 0xf8, 0x50, 0xbc, 0x04, 0x3a, 0xa5, 0xd6, 0xb8, 0x03, 0xed, 0x68,
	0xae, 0x28, 0xb7, 0x07, 0xcc, 0xad, 0x47, 0x73, 0x75, 0xe6, 0xd4, 0x21, 0xf4, 0x52, 0x8f, 0x26,
	0x62, 0xd2, 0x34, 0xce, 0x01, 0x17, 0xc6, 0x96, 0xa0, 0xe7, 0xd2, 0x3e, 0xe2, 0x4e, 0xaa, 0x68,
	0x67, 0xa8, 0x1f, 0xce, 0xdd, 0x4d, 0xc4, 0xd7, 0x76, 0x86, 0x64, 0x53, 0x95, 0xd9, 0xa2, 0xcd,
	0x40, 0x6c, 0x04, 0x7d, 0x6b, 0x53, 0xab, 0xd8, 0xe6, 0x91, 0xd8, 0x08, 0xc4, 0x36, 0x1a, 0x3a,
	0x97, 0xe8, 0x03, 0xd5, 0xfe, 0x50, 0xee, 0xb9, 0x0e, 0x69, 0xab, 0x2b, 0xb1, 0x48, 0x3c, 0xce,
	0x6c, 0x91, 0xe9, 0xc7, 0xcc, 0x02, 0x41, 0x13, 0x46, 0xd4, 0x53, 0xe8, 0xcf, 0xea, 0x89, 0x91,
	0xe0, 0x55, 0xc4, 0x22, 0xd3, 0x87, 0xec, 0xdf, 0x6b, 0xe0, 0x17, 0x8c, 0x52, 0x3d, 0xcf, 0x85,
	0x39, 0x5e, 0x62, 0xae, 0x9f, 0xb0, 0xd9, 0x76, 0x83, 0xbe, 0x24, 0x90, 0x5e, 0xae, 0x34, 0x1e,
	0x8b, 0x48, 0xc9, 0x1c, 0x71, 0x32, 0x5d, 0x01, 0x24, 0x11, 0x13, 0x02, 0xc6, 0x90, 0xf0, 0xa0,
	0x78, 0x2a, 0x5f, 0x23, 0xd0, 0x6b, 0x1a, 0x17, 0x47, 0xd0, 0x0f, 0x18, 0x63, 0x8e, 0x49, 0x69,
	0xbc, 0x74, 0xe2, 0x88, 0x3d, 0xb6, 0x05, 0x7e, 0x45, 0xe8, 0x38, 0x53, 0x8f, 0x60, 0xab, 0xe9,
	0x1a, 0x76, 0x3a, 0x66, 0xa7, 0xcd, 0x1a, 0x63, 0xab, 0x63, 0xd8, 0x49, 0x9d, 0x2b, 0xd1, 0x73,
	0xf3, 0x8b, 0xec, 0x99, 0x0c, 0x86, 0x05, 0x9c, 0xa5, 0x0a, 0xd6, 0x82, 0xf3, 0x51, 0x7f, 0x24,
	0x83, 0x8b, 0xd6, 0x94, 0x47, 0x78, 0x63, 0xf3, 0x9c, 0x9b, 0xf1, 0x63, 0xa9, 0x78, 0x06, 0xc6,
	0x59, 0x18, 0x1e, 0x82, 0x5a, 0x1c, 0xb5, 0x5f, 0xdb, 0x3c, 0xa2, 0x5f, 0x98, 0xb4, 0x6b, 0x34,
	0x69, 0x87, 0x5f, 0xc0, 0xee, 0xf2, 0x40, 0x0e, 0xa5, 0x2b, 0x02, 0xfe, 0x5b, 0x47, 0xaf, 0x17,
	0xaa, 0x34, 0xa5, 0x2a, 0xa5, 0xa1, 0xdc, 0x9d, 0x34, 0xe1, 0x67, 0xbf, 0xad, 0xc2, 0xd6, 0xa2,
	0x85, 0x32, 0xa0, 0xce, 0xe7, 0x95, 0x31, 0x47, 0x1f, 0x9f, 0x2c, 0xff, 0x0b, 0x4e, 0xfe, 0xe3,
	0x3f, 0xb0, 0x7f, 0xf8, 0x6e, 0x91, 0x7c, 0xdb, 0x70, 0x45, 0xfd, 0x00, 0xfd, 0x6f, 0x30, 0x2e,
	0xf9, 0x0f, 0xdf, 0xb5, 0x55, 0x92, 0xdf, 0xff, 0x3f, 0xdf, 0x30, 0x5c, 0xa1, 0x04, 0x4e, 0xe7,
	0x1d, 0xf2, 0x5e, 0x12, 0xf8, 0x72, 0xe7, 0xf7, 0x9b, 0x83, 0xd6, 0x1f, 0x37, 0x07, 0xad, 0x3f,
	0x6f, 0x0e, 0x5a, 0xbf, 0xfe, 0x75, 0xb0, 0x32, 0x6d, 0xf3, 0x1f, 0xf3, 0xf3, 0x7f, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x49, 0x37, 0xb7, 0x60, 0x5b, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserMerchantClient is the client API for UserMerchant service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserMerchantClient interface {
	UpdateUserMerchant(ctx context.Context, in *UserMerchantRequest, opts ...grpc.CallOption) (*UserMerchantResponse, error)
	GetUserMerchant(ctx context.Context, in *UserMerchantFilter, opts ...grpc.CallOption) (*UserMerchantRequest, error)
	CreateUserMerchant(ctx context.Context, in *UserMerchantRequest, opts ...grpc.CallOption) (*UserMerchantResponse, error)
}

type userMerchantClient struct {
	cc *grpc.ClientConn
}

func NewUserMerchantClient(cc *grpc.ClientConn) UserMerchantClient {
	return &userMerchantClient{cc}
}

func (c *userMerchantClient) UpdateUserMerchant(ctx context.Context, in *UserMerchantRequest, opts ...grpc.CallOption) (*UserMerchantResponse, error) {
	out := new(UserMerchantResponse)
	err := c.cc.Invoke(ctx, "/JuranwuyouUser.UserMerchant/UpdateUserMerchant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMerchantClient) GetUserMerchant(ctx context.Context, in *UserMerchantFilter, opts ...grpc.CallOption) (*UserMerchantRequest, error) {
	out := new(UserMerchantRequest)
	err := c.cc.Invoke(ctx, "/JuranwuyouUser.UserMerchant/GetUserMerchant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMerchantClient) CreateUserMerchant(ctx context.Context, in *UserMerchantRequest, opts ...grpc.CallOption) (*UserMerchantResponse, error) {
	out := new(UserMerchantResponse)
	err := c.cc.Invoke(ctx, "/JuranwuyouUser.UserMerchant/CreateUserMerchant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserMerchantServer is the server API for UserMerchant service.
type UserMerchantServer interface {
	UpdateUserMerchant(context.Context, *UserMerchantRequest) (*UserMerchantResponse, error)
	GetUserMerchant(context.Context, *UserMerchantFilter) (*UserMerchantRequest, error)
	CreateUserMerchant(context.Context, *UserMerchantRequest) (*UserMerchantResponse, error)
}

// UnimplementedUserMerchantServer can be embedded to have forward compatible implementations.
type UnimplementedUserMerchantServer struct {
}

func (*UnimplementedUserMerchantServer) UpdateUserMerchant(ctx context.Context, req *UserMerchantRequest) (*UserMerchantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserMerchant not implemented")
}
func (*UnimplementedUserMerchantServer) GetUserMerchant(ctx context.Context, req *UserMerchantFilter) (*UserMerchantRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMerchant not implemented")
}
func (*UnimplementedUserMerchantServer) CreateUserMerchant(ctx context.Context, req *UserMerchantRequest) (*UserMerchantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserMerchant not implemented")
}

func RegisterUserMerchantServer(s *grpc.Server, srv UserMerchantServer) {
	s.RegisterService(&_UserMerchant_serviceDesc, srv)
}

func _UserMerchant_UpdateUserMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMerchantServer).UpdateUserMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/JuranwuyouUser.UserMerchant/UpdateUserMerchant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMerchantServer).UpdateUserMerchant(ctx, req.(*UserMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMerchant_GetUserMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMerchantFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMerchantServer).GetUserMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/JuranwuyouUser.UserMerchant/GetUserMerchant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMerchantServer).GetUserMerchant(ctx, req.(*UserMerchantFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMerchant_CreateUserMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMerchantServer).CreateUserMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/JuranwuyouUser.UserMerchant/CreateUserMerchant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMerchantServer).CreateUserMerchant(ctx, req.(*UserMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserMerchant_serviceDesc = grpc.ServiceDesc{
	ServiceName: "JuranwuyouUser.UserMerchant",
	HandlerType: (*UserMerchantServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateUserMerchant",
			Handler:    _UserMerchant_UpdateUserMerchant_Handler,
		},
		{
			MethodName: "GetUserMerchant",
			Handler:    _UserMerchant_GetUserMerchant_Handler,
		},
		{
			MethodName: "CreateUserMerchant",
			Handler:    _UserMerchant_CreateUserMerchant_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/JuranwuyouUseruserMerchant.proto",
}

func (m *UserMerchantRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserMerchantRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserMerchantRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SkillIds) > 0 {
		i -= len(m.SkillIds)
		copy(dAtA[i:], m.SkillIds)
		i = encodeVarintJuranwuyouUseruserMerchant(dAtA, i, uint64(len(m.SkillIds)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe2
	}
	if m.Sort != 0 {
		i = encodeVarintJuranwuyouUseruserMerchant(dAtA, i, uint64(m.Sort))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd8
	}
	if m.CooperationType != 0 {
		i = encodeVarintJuranwuyouUseruserMerchant(dAtA, i, uint64(m.CooperationType))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd0
	}
	if m.ServiceType != 0 {
		i = encodeVarintJuranwuyouUseruserMerchant(dAtA, i, uint64(m.ServiceType))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc8
	}
	if m.SettlePartyId != 0 {
		i = encodeVarintJuranwuyouUseruserMerchant(dAtA, i, uint64((uint64(m.SettlePartyId)<<1)^uint64((m.SettlePartyId>>63))))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc0
	}
	if m.AssetsType != 0 {
		i = encodeVarintJuranwuyouUseruserMerchant(dAtA, i, uint64(m.AssetsType))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb8
	}
	if m.ParentId != 0 {
		i = encodeVarintJuranwuyouUseruserMerchant(dAtA, i, uint64((uint64(m.ParentId)<<1)^uint64((m.ParentId>>63))))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb0
	}
	if m.MerchantLevel != 0 {
		i = encodeVarintJuranwuyouUseruserMerchant(dAtA, i, uint64(m.MerchantLevel))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa8
	}
	if len(m.MerchantExtend) > 0 {
		i -= len(m.MerchantExtend)
		copy(dAtA[i:], m.MerchantExtend)
		i = encodeVarintJuranwuyouUseruserMerchant(dAtA, i, uint64(len(m.MerchantExtend)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	if m.OpenRemind != 0 {
		i = encodeVarintJuranwuyouUseruserMerchant(dAtA, i, uint64(m.OpenRemind))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x98
	}
	if m.Version != 0 {
		i = encodeVarintJuranwuyouUseruserMerchant(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x90
	}
	if len(m.UpdateTime) > 0 {
		i -= len(m.UpdateTime)
		copy(dAtA[i:], m.UpdateTime)
		i = encodeVarintJuranwuyouUseruserMerchant(dAtA, i, uint64(len(m.UpdateTime)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	if m.UpdateUserId != 0 {
		i = encodeVarintJuranwuyouUseruserMerchant(dAtA, i, uint64((uint64(m.UpdateUserId)<<1)^uint64((m.UpdateUserId>>63))))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if len(m.CreateTime) > 0 {
		i -= len(m.CreateTime)
		copy(dAtA[i:], m.CreateTime)
		i = encodeVarintJuranwuyouUseruserMerchant(dAtA, i, uint64(len(m.CreateTime)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	if m.CreateUserId != 0 {
		i = encodeVarintJuranwuyouUseruserMerchant(dAtA, i, uint64((uint64(m.CreateUserId)<<1)^uint64((m.CreateUserId>>63))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if len(m.TaxNo) > 0 {
		i -= len(m.TaxNo)
		copy(dAtA[i:], m.TaxNo)
		i = encodeVarintJuranwuyouUseruserMerchant(dAtA, i, uint64(len(m.TaxNo)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	if len(m.CreditCode) > 0 {
		i -= len(m.CreditCode)
		copy(dAtA[i:], m.CreditCode)
		i = encodeVarintJuranwuyouUseruserMerchant(dAtA, i, uint64(len(m.CreditCode)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if len(m.BusinessAddress) > 0 {
		i -= len(m.BusinessAddress)
		copy(dAtA[i:], m.BusinessAddress)
		i = encodeVarintJuranwuyouUseruserMerchant(dAtA, i, uint64(len(m.BusinessAddress)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if len(m.MainPerson) > 0 {
		i -= len(m.MainPerson)
		copy(dAtA[i:], m.MainPerson)
		i = encodeVarintJuranwuyouUseruserMerchant(dAtA, i, uint64(len(m.MainPerson)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if m.IsDelete != 0 {
		i = encodeVarintJuranwuyouUseruserMerchant(dAtA, i, uint64(m.IsDelete))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.IsEnabled != 0 {
		i = encodeVarintJuranwuyouUseruserMerchant(dAtA, i, uint64(m.IsEnabled))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.IsAudit != 0 {
		i = encodeVarintJuranwuyouUseruserMerchant(dAtA, i, uint64(m.IsAudit))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if len(m.BankNo) > 0 {
		i -= len(m.BankNo)
		copy(dAtA[i:], m.BankNo)
		i = encodeVarintJuranwuyouUseruserMerchant(dAtA, i, uint64(len(m.BankNo)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.BankName) > 0 {
		i -= len(m.BankName)
		copy(dAtA[i:], m.BankName)
		i = encodeVarintJuranwuyouUseruserMerchant(dAtA, i, uint64(len(m.BankName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.Mobile) > 0 {
		i -= len(m.Mobile)
		copy(dAtA[i:], m.Mobile)
		i = encodeVarintJuranwuyouUseruserMerchant(dAtA, i, uint64(len(m.Mobile)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.AddressLat != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.AddressLat))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x99
	}
	if m.AddressLng != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.AddressLng))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x91
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintJuranwuyouUseruserMerchant(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.ServiceCategoryIds) > 0 {
		i -= len(m.ServiceCategoryIds)
		copy(dAtA[i:], m.ServiceCategoryIds)
		i = encodeVarintJuranwuyouUseruserMerchant(dAtA, i, uint64(len(m.ServiceCategoryIds)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.BusinessScope) > 0 {
		i -= len(m.BusinessScope)
		copy(dAtA[i:], m.BusinessScope)
		i = encodeVarintJuranwuyouUseruserMerchant(dAtA, i, uint64(len(m.BusinessScope)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.CityIds) > 0 {
		i -= len(m.CityIds)
		copy(dAtA[i:], m.CityIds)
		i = encodeVarintJuranwuyouUseruserMerchant(dAtA, i, uint64(len(m.CityIds)))
		i--
		dAtA[i] = 0x72
	}
	if m.AreaId != 0 {
		i = encodeVarintJuranwuyouUseruserMerchant(dAtA, i, uint64((uint64(m.AreaId)<<1)^uint64((m.AreaId>>63))))
		i--
		dAtA[i] = 0x68
	}
	if m.CityId != 0 {
		i = encodeVarintJuranwuyouUseruserMerchant(dAtA, i, uint64((uint64(m.CityId)<<1)^uint64((m.CityId>>63))))
		i--
		dAtA[i] = 0x60
	}
	if m.ProvinceId != 0 {
		i = encodeVarintJuranwuyouUseruserMerchant(dAtA, i, uint64((uint64(m.ProvinceId)<<1)^uint64((m.ProvinceId>>63))))
		i--
		dAtA[i] = 0x58
	}
	if m.IsCertification != 0 {
		i = encodeVarintJuranwuyouUseruserMerchant(dAtA, i, uint64(m.IsCertification))
		i--
		dAtA[i] = 0x50
	}
	if len(m.LegalPersonName) > 0 {
		i -= len(m.LegalPersonName)
		copy(dAtA[i:], m.LegalPersonName)
		i = encodeVarintJuranwuyouUseruserMerchant(dAtA, i, uint64(len(m.LegalPersonName)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.CertNo) > 0 {
		i -= len(m.CertNo)
		copy(dAtA[i:], m.CertNo)
		i = encodeVarintJuranwuyouUseruserMerchant(dAtA, i, uint64(len(m.CertNo)))
		i--
		dAtA[i] = 0x42
	}
	if m.Category != 0 {
		i = encodeVarintJuranwuyouUseruserMerchant(dAtA, i, uint64(m.Category))
		i--
		dAtA[i] = 0x38
	}
	if m.Type != 0 {
		i = encodeVarintJuranwuyouUseruserMerchant(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintJuranwuyouUseruserMerchant(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if m.PassId != 0 {
		i = encodeVarintJuranwuyouUseruserMerchant(dAtA, i, uint64((uint64(m.PassId)<<1)^uint64((m.PassId>>63))))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintJuranwuyouUseruserMerchant(dAtA, i, uint64((uint64(m.UserId)<<1)^uint64((m.UserId>>63))))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintJuranwuyouUseruserMerchant(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintJuranwuyouUseruserMerchant(dAtA, i, uint64((uint64(m.Id)<<1)^uint64((m.Id>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserMerchantFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserMerchantFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserMerchantFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintJuranwuyouUseruserMerchant(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserMerchantResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserMerchantResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserMerchantResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintJuranwuyouUseruserMerchant(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintJuranwuyouUseruserMerchant(dAtA []byte, offset int, v uint64) int {
	offset -= sovJuranwuyouUseruserMerchant(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UserMerchantRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sozJuranwuyouUseruserMerchant(uint64(m.Id))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovJuranwuyouUseruserMerchant(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sozJuranwuyouUseruserMerchant(uint64(m.UserId))
	}
	if m.PassId != 0 {
		n += 1 + sozJuranwuyouUseruserMerchant(uint64(m.PassId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovJuranwuyouUseruserMerchant(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovJuranwuyouUseruserMerchant(uint64(m.Type))
	}
	if m.Category != 0 {
		n += 1 + sovJuranwuyouUseruserMerchant(uint64(m.Category))
	}
	l = len(m.CertNo)
	if l > 0 {
		n += 1 + l + sovJuranwuyouUseruserMerchant(uint64(l))
	}
	l = len(m.LegalPersonName)
	if l > 0 {
		n += 1 + l + sovJuranwuyouUseruserMerchant(uint64(l))
	}
	if m.IsCertification != 0 {
		n += 1 + sovJuranwuyouUseruserMerchant(uint64(m.IsCertification))
	}
	if m.ProvinceId != 0 {
		n += 1 + sozJuranwuyouUseruserMerchant(uint64(m.ProvinceId))
	}
	if m.CityId != 0 {
		n += 1 + sozJuranwuyouUseruserMerchant(uint64(m.CityId))
	}
	if m.AreaId != 0 {
		n += 1 + sozJuranwuyouUseruserMerchant(uint64(m.AreaId))
	}
	l = len(m.CityIds)
	if l > 0 {
		n += 1 + l + sovJuranwuyouUseruserMerchant(uint64(l))
	}
	l = len(m.BusinessScope)
	if l > 0 {
		n += 1 + l + sovJuranwuyouUseruserMerchant(uint64(l))
	}
	l = len(m.ServiceCategoryIds)
	if l > 0 {
		n += 2 + l + sovJuranwuyouUseruserMerchant(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 2 + l + sovJuranwuyouUseruserMerchant(uint64(l))
	}
	if m.AddressLng != 0 {
		n += 10
	}
	if m.AddressLat != 0 {
		n += 10
	}
	l = len(m.Mobile)
	if l > 0 {
		n += 2 + l + sovJuranwuyouUseruserMerchant(uint64(l))
	}
	l = len(m.BankName)
	if l > 0 {
		n += 2 + l + sovJuranwuyouUseruserMerchant(uint64(l))
	}
	l = len(m.BankNo)
	if l > 0 {
		n += 2 + l + sovJuranwuyouUseruserMerchant(uint64(l))
	}
	if m.IsAudit != 0 {
		n += 2 + sovJuranwuyouUseruserMerchant(uint64(m.IsAudit))
	}
	if m.IsEnabled != 0 {
		n += 2 + sovJuranwuyouUseruserMerchant(uint64(m.IsEnabled))
	}
	if m.IsDelete != 0 {
		n += 2 + sovJuranwuyouUseruserMerchant(uint64(m.IsDelete))
	}
	l = len(m.MainPerson)
	if l > 0 {
		n += 2 + l + sovJuranwuyouUseruserMerchant(uint64(l))
	}
	l = len(m.BusinessAddress)
	if l > 0 {
		n += 2 + l + sovJuranwuyouUseruserMerchant(uint64(l))
	}
	l = len(m.CreditCode)
	if l > 0 {
		n += 2 + l + sovJuranwuyouUseruserMerchant(uint64(l))
	}
	l = len(m.TaxNo)
	if l > 0 {
		n += 2 + l + sovJuranwuyouUseruserMerchant(uint64(l))
	}
	if m.CreateUserId != 0 {
		n += 2 + sozJuranwuyouUseruserMerchant(uint64(m.CreateUserId))
	}
	l = len(m.CreateTime)
	if l > 0 {
		n += 2 + l + sovJuranwuyouUseruserMerchant(uint64(l))
	}
	if m.UpdateUserId != 0 {
		n += 2 + sozJuranwuyouUseruserMerchant(uint64(m.UpdateUserId))
	}
	l = len(m.UpdateTime)
	if l > 0 {
		n += 2 + l + sovJuranwuyouUseruserMerchant(uint64(l))
	}
	if m.Version != 0 {
		n += 2 + sovJuranwuyouUseruserMerchant(uint64(m.Version))
	}
	if m.OpenRemind != 0 {
		n += 2 + sovJuranwuyouUseruserMerchant(uint64(m.OpenRemind))
	}
	l = len(m.MerchantExtend)
	if l > 0 {
		n += 2 + l + sovJuranwuyouUseruserMerchant(uint64(l))
	}
	if m.MerchantLevel != 0 {
		n += 2 + sovJuranwuyouUseruserMerchant(uint64(m.MerchantLevel))
	}
	if m.ParentId != 0 {
		n += 2 + sozJuranwuyouUseruserMerchant(uint64(m.ParentId))
	}
	if m.AssetsType != 0 {
		n += 2 + sovJuranwuyouUseruserMerchant(uint64(m.AssetsType))
	}
	if m.SettlePartyId != 0 {
		n += 2 + sozJuranwuyouUseruserMerchant(uint64(m.SettlePartyId))
	}
	if m.ServiceType != 0 {
		n += 2 + sovJuranwuyouUseruserMerchant(uint64(m.ServiceType))
	}
	if m.CooperationType != 0 {
		n += 2 + sovJuranwuyouUseruserMerchant(uint64(m.CooperationType))
	}
	if m.Sort != 0 {
		n += 2 + sovJuranwuyouUseruserMerchant(uint64(m.Sort))
	}
	l = len(m.SkillIds)
	if l > 0 {
		n += 2 + l + sovJuranwuyouUseruserMerchant(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserMerchantFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovJuranwuyouUseruserMerchant(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserMerchantResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovJuranwuyouUseruserMerchant(uint64(m.Id))
	}
	if m.Success {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovJuranwuyouUseruserMerchant(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozJuranwuyouUseruserMerchant(x uint64) (n int) {
	return sovJuranwuyouUseruserMerchant(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserMerchantRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJuranwuyouUseruserMerchant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserMerchantRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserMerchantRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Id = int64(v)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserMerchant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserMerchant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.UserId = int64(v)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.PassId = int64(v)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserMerchant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserMerchant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			m.Category = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Category |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserMerchant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserMerchant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegalPersonName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserMerchant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserMerchant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LegalPersonName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCertification", wireType)
			}
			m.IsCertification = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsCertification |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvinceId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.ProvinceId = int64(v)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.CityId = int64(v)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.AreaId = int64(v)
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserMerchant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserMerchant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CityIds = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessScope", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserMerchant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserMerchant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BusinessScope = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceCategoryIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserMerchant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserMerchant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceCategoryIds = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserMerchant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserMerchant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressLng", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.AddressLng = float64(math.Float64frombits(v))
		case 19:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressLat", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.AddressLat = float64(math.Float64frombits(v))
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mobile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserMerchant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserMerchant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mobile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserMerchant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserMerchant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BankName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserMerchant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserMerchant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BankNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAudit", wireType)
			}
			m.IsAudit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsAudit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			m.IsEnabled = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsEnabled |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDelete", wireType)
			}
			m.IsDelete = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsDelete |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainPerson", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserMerchant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserMerchant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MainPerson = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserMerchant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserMerchant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BusinessAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreditCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserMerchant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserMerchant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreditCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaxNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserMerchant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserMerchant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaxNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateUserId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.CreateUserId = int64(v)
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserMerchant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserMerchant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUserId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.UpdateUserId = int64(v)
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserMerchant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserMerchant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenRemind", wireType)
			}
			m.OpenRemind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpenRemind |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantExtend", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserMerchant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserMerchant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MerchantExtend = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantLevel", wireType)
			}
			m.MerchantLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MerchantLevel |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.ParentId = int64(v)
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetsType", wireType)
			}
			m.AssetsType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetsType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlePartyId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.SettlePartyId = int64(v)
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceType", wireType)
			}
			m.ServiceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CooperationType", wireType)
			}
			m.CooperationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CooperationType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 43:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			m.Sort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJuranwuyouUseruserMerchant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJuranwuyouUseruserMerchant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SkillIds = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJuranwuyouUseruserMerchant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJuranwuyouUseruserMerchant
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJuranwuyouUseruserMerchant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserMerchantFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJuranwuyouUseruserMerchant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserMerchantFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserMerchantFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipJuranwuyouUseruserMerchant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJuranwuyouUseruserMerchant
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJuranwuyouUseruserMerchant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserMerchantResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJuranwuyouUseruserMerchant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserMerchantResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserMerchantResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipJuranwuyouUseruserMerchant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJuranwuyouUseruserMerchant
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJuranwuyouUseruserMerchant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipJuranwuyouUseruserMerchant(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowJuranwuyouUseruserMerchant
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJuranwuyouUseruserMerchant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthJuranwuyouUseruserMerchant
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupJuranwuyouUseruserMerchant
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthJuranwuyouUseruserMerchant
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthJuranwuyouUseruserMerchant        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowJuranwuyouUseruserMerchant          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupJuranwuyouUseruserMerchant = fmt.Errorf("proto: unexpected end of group")
)
